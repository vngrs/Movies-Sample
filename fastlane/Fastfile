# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# export LC_ALL=en_US.UTF-8
# export LANG=en_US.UTF-8

PRODUCE_APP_IDENTIFIER = "com.vngrs.Movies.demo"

module ReleaseTagPrefix
  FIREBASE = "firebase/"
  APPSTORE = "appstore/"
end

default_platform(:ios)

platform :ios do

  before_all do

    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/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" # ci
    #ENV["SLACK_URL"] = "https://hooks.slack.com/services/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" # mafp_mobile_qa
    #ENV["SLACK_URL"] = "https://hooks.slack.com/services/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" # maf-properties

    # Testing Web Hook .. Don't use
    #ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"

  end

  #---------------------- SIGNING LANES ------------------------------#

  lane :certs_all do

    certs_dev
    certs_adhoc
    certs_appstore
    uitesting_signing
  end

  lane :uitesting_signing do

  	match(
      app_identifier: "com.vngrs.MoviesUITests",
      type: "development",
      readonly: true
    )
    certs_dev
  end

  desc "Fetches the provisioning profiles so you can build locally and deploy to your device"
  lane :certs_dev do

    match(
      app_identifier: ENV["PRODUCE_APP_IDENTIFIER"],
      type: "development",
      force_for_new_devices: true,
      readonly: true
    )
  end

  desc "Fetches the provisioning profiles so you can build for beta or appstore distribution"
  lane :certs_adhoc do

    match(
      app_identifier: ENV["PRODUCE_APP_IDENTIFIER"],
      type: "adhoc",
      force_for_new_devices: true,
      readonly: true
    )
  end

  desc "AppStore signing"
  lane :certs_appstore do

    match(
      app_identifier: ENV["PRODUCE_APP_IDENTIFIER"],
      type: "appstore",
      readonly: true
    )
  end

  #---------------------- PUBLIC LANES ------------------------------#

  desc "AppStore Distribution"
  lane :go_testflight do |params|

    build_config = "Release"
    schemes = {
      "Movies" => "com.vngrs.Movies.demo"
    }
    build(schemes: schemes, config: build_config, export: "app-store", bitcode: true)
    upload_testflight(schemes: schemes)
    upload_dsyms
  end

  desc "Firebase App Distribution"
  lane :go_firebase do

    build_config = "AdHoc"
    schemes = {
      "Movies" => "com.vngrs.Movies.demo"
    }

    build(schemes: schemes, config: build_config, export: "ad-hoc", bitcode: false)
    upload_firebase
  end

  #---------------------- DSYMS LANES ------------------------------#

  desc "Upload any dsyms in the current directory to crashlytics"
  lane :upload_dsyms do |options|

    version_number = get_version_number(target: "Movies")
    build_number = get_build_number
    download_dsyms(
      app_identifier: "com.vngrs.Movies.demo",
      version: version_number,
      build_number: build_number
    )
    upload_symbols_to_crashlytics(gsp_path: "./Movies/Resources/GoogleService-Info.plist")
    # clean_build_artifacts
  end

  #---------------------- PRIVATE LANES ------------------------------#

  private_lane :upload_firebase do

    changeLog = ENV["CHANGE_LOG"]

    puts "#{changelog}"

    # firebase_app_distribution(
    #     app: ENV['FIREBASE_APP_ID'],
    #     groups: "Developers, Testers",
    #     release_notes: changeLog,
    #     firebase_cli_path: "/usr/local/bin/firebase",
    #     ipa_path: "build.ipa",
    #     debug: true
    # )
  end

  private_lane :upload_testflight do |params|

    version = get_build_number
    params[:schemes].each do | scheme, app_id |

      path = "#{scheme}_#{version}.ipa"

      upload_to_testflight(
        beta_app_feedback_email: "obada@vngrs.com",
        notify_external_testers: true,
        ipa: path,
        skip_submission: true,
        skip_waiting_for_build_processing: true,
        username: "obada@vngrs.com"
      )
    end
  end

  desc "Firebase App Distribution"
  lane :adhoc_build do

    build_config = "AdHoc"
    schemes = {
      "Movies" => "com.vngrs.Movies.demo"
    }
    auto_increment_version(tagPrefix: ReleaseTagPrefix::FIREBASE)
    # build(schemes: schemes, config: build_config, export: "ad-hoc", bitcode: false)
    upload_firebase
    push_new_version
  end

  desc "Build"
  private_lane :build do |params|

    export_method = params[:export]
    include_bitcode = params[:bitcode]

    params[:schemes].each do | scheme, app_id |

    version = get_build_number
    ipa_name = "build"
    ipa_path = "../build.ipa"
    build_config = params[:config]
    gym(
          clean: true,
          configuration: build_config,
          scheme: scheme,
          workspace: "Movies.xcworkspace",
          export_method: export_method,
          output_name: ipa_name,
          include_bitcode: include_bitcode
        )
    end
  end

  private_lane :auto_increment_version do |params|

      sh("git fetch --tags")
      analyze_commits(match: "#{params[:tagPrefix]}*")
      increment_build_number
      @BUILD_NUMBER = get_build_number
      @VERSION_NUMBER = lane_context[SharedValues::RELEASE_NEXT_VERSION]
      @CHANGE_LOG = conventional_changelog(title: "Changelog", format: 'plain',  display_links: true)
      
      puts "NEW VERSION >>> #{@VERSION_NUMBER} #{@BUILD_NUMBER}"
      increment_version_number(version_number: @VERSION_NUMBER)

      begin
        sh("envman add --key CHANGE_LOG --value \"#{@CHANGE_LOG}\"")
      rescue => e
        puts "Running locally, no envman available, will continue anyway"
      end
      
      ENV["CHANGE_LOG"] = @CHANGE_LOG
      ENV["VERSION_NUMBER"] = @VERSION_NUMBER
      ENV["BUILD_NUMBER"] = @BUILD_NUMBER
  end
  
  private_lane :push_new_version do # Should run only AFTER a successful build

      @VERSION_NUMBER = ENV["VERSION_NUMBER"]
      @BUILD_NUMBER = ENV["BUILD_NUMBER"]

      commit_version_bump(message:"New version: #{@VERSION_NUMBER} (#{@BUILD_NUMBER}) [skip ci]", force: true, xcodeproj: "Movies.xcodeproj")
      # set_git_release(
      # 	releaseName: "Firebase",
      # 	tagPrefix: "#{ReleaseTagPrefix::FIREBASE}",
      # 	is_prerelease: true
      # )
      # push_to_git_remote(remote_branch: "master", tags: true)
  end

  private_lane :set_git_release do |params|
    
    @CHANGE_LOG = ENV["CHANGE_LOG"]
    @VERSION_NUMBER = ENV["VERSION_NUMBER"]
    @BUILD_NUMBER = ENV["BUILD_NUMBER"]

    set_github_release(
  		repository_name: ENV['GITHUB_REPOSITORY_NAME'],
  		name: "#{params[:releaseName]}-#{@VERSION_NUMBER}",
  		tag_name: "#{params[:tagPrefix]}#{@VERSION_NUMBER}",
  		api_token: ENV['GITHUB_API_TOKEN'],
  		description: @CHANGE_LOG,
  		is_prerelease: params[:is_prerelease],
  		commitish: "master"
    )
  end
end
